name: Release

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [main]

permissions:
  contents: write
  packages: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || startsWith(github.ref, 'refs/tags/') }}
    
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            asset_name: tarot_agent-linux-amd64
          - os: macos-latest
            asset_name: tarot_agent-darwin-amd64
          - os: windows-latest
            asset_name: tarot_agent-windows-amd64.exe
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        otp-version: '27.0'
        elixir-version: '1.18'
    
    - name: Restore dependencies cache
      uses: actions/cache@v4
      with:
        path: deps
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-mix-
    
    - name: Install dependencies
      run: mix deps.get
    
    - name: Build release
      run: |
        MIX_ENV=prod mix compile
        MIX_ENV=prod mix escript.build
        
    - name: Rename binary
      run: |
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          mv tarot_agent tarot_agent.exe
          mv tarot_agent.exe ${{ matrix.asset_name }}
        else
          mv tarot_agent ${{ matrix.asset_name }}
        fi
      shell: bash
    
    - name: Get version
      id: version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="latest"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
      shell: bash
    
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: ${{ matrix.asset_name }}
        draft: false
        prerelease: false
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        body: |
          ## Tarot Agent Release ${{ steps.version.outputs.version }}
          
          ### Installation
          
          Download the appropriate binary for your system and make it executable:
          
          ```bash
          # Linux/macOS
          chmod +x tarot_agent-*
          ./tarot_agent-*
          
          # Windows
          tarot_agent-windows-amd64.exe
          ```
          
          ### What's Changed
          See the [changelog](https://github.com/${{ github.repository }}/compare/previous...${{ steps.version.outputs.version }}) for details.
        
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: ${{ matrix.asset_name }}

  auto-release:
    name: Auto Release on Main
    runs-on: ubuntu-latest
    needs: [release]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get next version
      id: version
      run: |
        # Get the latest tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        
        # Extract version numbers
        VERSION=${LATEST_TAG#v}
        IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
        MAJOR=${VERSION_PARTS[0]:-0}
        MINOR=${VERSION_PARTS[1]:-0}
        PATCH=${VERSION_PARTS[2]:-0}
        
        # Increment patch version
        PATCH=$((PATCH + 1))
        
        # Create new version
        NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version will be: $NEW_VERSION"
    
    - name: Create tag
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a ${{ steps.version.outputs.new_version }} -m "Automated release ${{ steps.version.outputs.new_version }}"
        git push origin ${{ steps.version.outputs.new_version }}